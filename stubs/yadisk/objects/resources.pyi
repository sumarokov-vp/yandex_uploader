import datetime
from ..compat import Generator, List
from ..yadisk import YaDisk
from .disk import UserPublicInfoObject
from .yadisk_object import YaDiskObject
from _typeshed import Incomplete
from typing import AnyStr, IO, Optional, Protocol, Union, overload

class CommentIDsObject(YaDiskObject):
    private_resource: Optional[str]
    public_resource: Optional[str]
    def __init__(self, comment_ids: Optional[dict] = ..., yadisk: Optional['YaDisk'] = ...) -> None: ...

class EXIFObject(YaDiskObject):
    date_time: Optional['datetime.datetime']
    def __init__(self, exif: Optional[dict] = ..., yadisk: Optional['YaDisk'] = ...) -> None: ...

class FilesResourceListObject(YaDiskObject):
    items: Optional[List['ResourceObject']]
    limit: Optional[int]
    offset: Optional[int]
    def __init__(self, files_resource_list: Optional[dict] = ..., yadisk: Optional['YaDisk'] = ...) -> None: ...

class LastUploadedResourceListObject(YaDiskObject):
    items: Optional[List['ResourceObject']]
    limit: Optional[int]
    def __init__(self, last_uploaded_resources_list: Optional[dict] = ..., yadisk: Optional['YaDisk'] = ...) -> None: ...

class LinkObject(YaDiskObject):
    href: Optional[str]
    method: Optional[str]
    templated: Optional[bool]
    def __init__(self, link: Optional[dict] = ..., yadisk: Optional['YaDisk'] = ...) -> None: ...

class OperationLinkObject(LinkObject):
    def get_status(self, **kwargs) -> str: ...

class PublicResourcesListObject(YaDiskObject):
    items: Optional[List['PublicResourceObject']]
    type: Optional[str]
    limit: Optional[int]
    offset: Optional[int]
    def __init__(self, public_resources_list: Optional[dict] = ..., yadisk: Optional['YaDisk'] = ...) -> None: ...

class ResourceProtocol(Protocol):
    @property
    def type(self) -> Optional[str]: ...
    @property
    def path(self) -> Optional[str]: ...
    @property
    def public_key(self) -> Optional[str]: ...
    @property
    def public_url(self) -> Optional[str]: ...
    @property
    def file(self) -> Optional[str]: ...

class ResourceObjectMethodsMixin:
    def get_meta(self, relative_path: Optional[str] = ..., **kwargs) -> ResourceObject: ...
    def get_public_meta(self, **kwargs) -> PublicResourceObject: ...
    def exists(self, relative_path: Optional[str] = ..., **kwargs) -> bool: ...
    def get_type(self, relative_path: Optional[str] = ..., **kwargs) -> str: ...
    def is_dir(self, relative_path: Optional[str] = ..., **kwargs) -> bool: ...
    def is_file(self, relative_path: Optional[str] = ..., **kwargs) -> bool: ...
    def listdir(self, relative_path: Optional[str] = ..., **kwargs) -> Generator['ResourceObject', None, None]: ...
    def public_listdir(self, **kwargs) -> Generator['PublicResourceObject', None, None]: ...
    def get_upload_link(self, relative_path: Optional[str] = ..., **kwargs) -> str: ...
    def upload(self, path_or_file: Union[str, IO[AnyStr]], relative_path: Optional[str] = ..., **kwargs) -> ResourceLinkObject: ...
    def upload_url(self, url: str, relative_path: Optional[str] = ..., **kwargs) -> OperationLinkObject: ...
    def get_download_link(self, relative_path: Optional[str] = ..., **kwargs) -> str: ...
    @overload
    def download(self, dst_path_or_file: Union[str, IO[AnyStr]], **kwargs) -> ResourceLinkObject: ...
    @overload
    def download(self, relative_path: Optional[str], dst_path_or_file: Union[str, IO[AnyStr]], **kwargs) -> ResourceLinkObject: ...
    @overload
    def patch(self, properties: dict, **kwargs) -> ResourceObject: ...
    @overload
    def patch(self, relative_path: Union[str, None], properties: dict, **kwargs) -> ResourceObject: ...
    def publish(self, relative_path: Optional[str] = ..., **kwargs) -> ResourceLinkObject: ...
    def unpublish(self, relative_path: Optional[str] = ..., **kwargs) -> ResourceLinkObject: ...
    def mkdir(self, relative_path: Optional[str] = ..., **kwargs) -> ResourceLinkObject: ...
    def remove(self, relative_path: Optional[str] = ..., **kwargs) -> Optional[OperationLinkObject]: ...
    @overload
    def move(self, dst_path: str, **kwargs) -> Union['ResourceLinkObject', OperationLinkObject]: ...
    @overload
    def move(self, relative_path: Optional[str], dst_path: str, **kwargs) -> Union['ResourceLinkObject', OperationLinkObject]: ...
    @overload
    def rename(self, new_name: str, **kwargs) -> Union['ResourceLinkObject', OperationLinkObject]: ...
    @overload
    def rename(self, relative_path: Optional[str], new_name: str, **kwargs) -> Union['ResourceLinkObject', OperationLinkObject]: ...
    @overload
    def copy(self, dst_path: str, **kwargs) -> Union['ResourceLinkObject', OperationLinkObject]: ...
    @overload
    def copy(self, relative_path: Optional[str], dst_path: str, **kwargs) -> Union['ResourceLinkObject', OperationLinkObject]: ...

class ResourceObject(YaDiskObject, ResourceObjectMethodsMixin):
    antivirus_status: Optional[str]
    file: Optional[str]
    size: Optional[int]
    public_key: Optional[str]
    sha256: Optional[str]
    embedded: Optional['ResourceListObject']
    name: Optional[str]
    exif: Optional[EXIFObject]
    resource_id: Optional[str]
    custom_properties: Optional[dict]
    public_url: Optional[str]
    share: Optional['ShareInfoObject']
    modified: Optional['datetime.datetime']
    created: Optional['datetime.datetime']
    photoslice_time: Optional['datetime.datetime']
    mime_type: Optional[str]
    path: Optional[str]
    preview: Optional[str]
    comment_ids: Optional[CommentIDsObject]
    type: Optional[str]
    media_type: Optional[str]
    md5: Optional[str]
    revision: Optional[int]
    def __init__(self, resource: Optional[dict] = ..., yadisk: Optional['YaDisk'] = ...) -> None: ...

class ResourceLinkObject(LinkObject, ResourceObjectMethodsMixin):
    path: Optional[str]
    def __init__(self, link: Optional[dict] = ..., yadisk: Optional['YaDisk'] = ...) -> None: ...
    @staticmethod
    def from_path(path: Optional[str], yadisk: Optional['YaDisk'] = ...) -> ResourceLinkObject: ...

class PublicResourceLinkObject(LinkObject, ResourceObjectMethodsMixin):
    public_key: Optional[str]
    public_url: Optional[str]
    def __init__(self, link: Optional[dict] = ..., yadisk: Optional['YaDisk'] = ...) -> None: ...
    @staticmethod
    def from_public_key(public_key: Optional[str], yadisk: Optional['YaDisk'] = ...) -> PublicResourceLinkObject: ...

class ResourceListObject(YaDiskObject):
    sort: Optional[str]
    items: Optional[List[ResourceObject]]
    limit: Optional[int]
    offset: Optional[int]
    path: Optional[str]
    total: Optional[int]
    def __init__(self, resource_list: Optional[dict] = ..., yadisk: Optional['YaDisk'] = ...) -> None: ...

class ResourceUploadLinkObject(LinkObject):
    operation_id: Optional[str]
    def __init__(self, resource_upload_link: Optional[dict] = ..., yadisk: Optional['YaDisk'] = ...) -> None: ...

class ResourceDownloadLinkObject(LinkObject): ...

class ShareInfoObject(YaDiskObject):
    is_root: Optional[bool]
    is_owned: Optional[bool]
    rights: Optional[str]
    def __init__(self, share_info: Optional[dict] = ..., yadisk: Optional['YaDisk'] = ...) -> None: ...

class PublicResourceObject(ResourceObject):
    views_count: Optional[int]
    view_count: Optional[int]
    embedded: Optional['PublicResourceListObject']
    owner: Optional[UserPublicInfoObject]
    def __init__(self, public_resource: Incomplete | None = ..., yadisk: Incomplete | None = ...) -> None: ...

class PublicResourceListObject(ResourceListObject):
    public_key: Optional[str]
    items: Optional[List[PublicResourceObject]]
    def __init__(self, public_resource_list: Optional[dict] = ..., yadisk: Optional['YaDisk'] = ...) -> None: ...

class TrashResourceObject(ResourceObject):
    embedded: Optional['TrashResourceListObject']
    origin_path: Optional[str]
    deleted: Optional['datetime.datetime']
    def __init__(self, trash_resource: Optional[dict] = ..., yadisk: Optional['YaDisk'] = ...) -> None: ...
    def get_meta(self, relative_path: Optional[str] = ..., **kwargs) -> TrashResourceObject: ...
    def exists(self, relative_path: Optional[str] = ..., **kwargs) -> bool: ...
    def get_type(self, relative_path: Optional[str] = ..., **kwargs) -> str: ...
    def is_dir(self, relative_path: Optional[str] = ..., **kwargs) -> bool: ...
    def is_file(self, relative_path: Optional[str] = ..., **kwargs) -> bool: ...
    def listdir(self, relative_path: Optional[str] = ..., **kwargs) -> Generator['TrashResourceObject', None, None]: ...
    def remove(self, relative_path: Optional[str] = ..., **kwargs) -> Optional[OperationLinkObject]: ...
    @overload
    def restore(self, dst_path: str, **kwargs) -> Union[ResourceLinkObject, OperationLinkObject]: ...
    @overload
    def restore(self, relative_path: Optional[str], dst_path: str, **kwargs) -> Union[ResourceLinkObject, OperationLinkObject]: ...
    def get_public_meta(self, *args, **kwargs) -> None: ...
    def public_listdir(self, *args, **kwargs) -> None: ...
    def get_download_link(self, *args, **kwargs) -> None: ...
    def download(self, *args, **kwargs) -> None: ...
    def get_upload_link(self, *args, **kwargs) -> None: ...
    def upload(self, *args, **kwargs) -> None: ...
    def copy(self, *args, **kwargs) -> None: ...
    def move(self, *args, **kwargs) -> None: ...
    def rename(self, *args, **kwargs) -> None: ...
    def upload_url(self, *args, **kwargs) -> None: ...
    def patch(self, *args, **kwargs) -> None: ...
    def publish(self, *args, **kwargs) -> None: ...
    def unpublish(self, *args, **kwargs) -> None: ...
    def mkdir(self, *args, **kwargs) -> None: ...

class TrashResourceListObject(ResourceListObject):
    items: Optional[List[TrashResourceObject]]
    def __init__(self, trash_resource_list: Optional[dict] = ..., yadisk: Optional['YaDisk'] = ...) -> None: ...
