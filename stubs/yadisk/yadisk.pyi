from .api import *
import requests
from .compat import Dict, Generator
from .objects import DiskInfoObject, OperationLinkObject, PublicResourceLinkObject, PublicResourceObject, PublicResourcesListObject, ResourceLinkObject, ResourceObject, TokenObject, TokenRevokeStatusObject, TrashResourceObject
from typing import Any, AnyStr, BinaryIO, IO, Optional, Union

class YaDisk:
    id: str
    secret: str
    token: str
    default_args: Dict[str, Any]
    def __init__(self, id: str = ..., secret: str = ..., token: str = ..., default_args: Optional[Dict[str, Any]] = ...) -> None: ...
    def clear_session_cache(self) -> None: ...
    def make_session(self, token: Optional[str] = ...) -> requests.Session: ...
    def get_session(self, token: Optional[str] = ...) -> requests.Session: ...
    def get_auth_url(self, **kwargs) -> str: ...
    def get_code_url(self, **kwargs) -> str: ...
    def get_token(self, code: str, **kwargs) -> TokenObject: ...
    def refresh_token(self, refresh_token: str, **kwargs) -> TokenObject: ...
    def revoke_token(self, token: Optional[str] = ..., **kwargs) -> TokenRevokeStatusObject: ...
    def check_token(self, token: Optional[str] = ..., **kwargs) -> bool: ...
    def get_disk_info(self, **kwargs) -> DiskInfoObject: ...
    def get_meta(self, path: str, **kwargs) -> ResourceObject: ...
    def exists(self, path: str, **kwargs) -> bool: ...
    def get_type(self, path: str, **kwargs) -> str: ...
    def is_file(self, path: str, **kwargs) -> bool: ...
    def is_dir(self, path: str, **kwargs) -> bool: ...
    def listdir(self, path: str, **kwargs) -> Generator['ResourceObject', None, None]: ...
    def get_upload_link(self, path: str, **kwargs) -> str: ...
    def upload(self, file_or_path: Union[str, bytes, IO[AnyStr]], dst_path: str, **kwargs) -> ResourceLinkObject: ...
    def upload_by_link(self, file_or_path: Union[str, bytes, IO[AnyStr]], link: str, **kwargs) -> None: ...
    def get_download_link(self, path: str, **kwargs) -> str: ...
    def download(self, src_path: str, file_or_path: Union[str, bytes, BinaryIO], **kwargs) -> ResourceLinkObject: ...
    def download_by_link(self, link: str, file_or_path: Union[str, bytes, BinaryIO], **kwargs) -> None: ...
    def remove(self, path: str, **kwargs) -> Optional['OperationLinkObject']: ...
    def mkdir(self, path: str, **kwargs) -> ResourceLinkObject: ...
    def get_trash_meta(self, path: str, **kwargs) -> TrashResourceObject: ...
    def trash_exists(self, path: str, **kwargs) -> bool: ...
    def copy(self, src_path: str, dst_path: str, **kwargs) -> Union[ResourceLinkObject, 'OperationLinkObject']: ...
    def restore_trash(self, path: str, dst_path: Optional[str] = ..., **kwargs) -> Union[ResourceLinkObject, 'OperationLinkObject']: ...
    def move(self, src_path: str, dst_path: str, **kwargs) -> Union[ResourceLinkObject, 'OperationLinkObject']: ...
    def rename(self, src_path: str, new_name: str, **kwargs) -> Union[ResourceLinkObject, 'OperationLinkObject']: ...
    def remove_trash(self, path: str, **kwargs) -> Optional['OperationLinkObject']: ...
    def publish(self, path: str, **kwargs) -> ResourceLinkObject: ...
    def unpublish(self, path: str, **kwargs) -> ResourceLinkObject: ...
    def save_to_disk(self, public_key: str, **kwargs) -> Union[ResourceLinkObject, 'OperationLinkObject']: ...
    def get_public_meta(self, public_key: str, **kwargs) -> PublicResourceObject: ...
    def public_exists(self, public_key: str, **kwargs) -> bool: ...
    def public_listdir(self, public_key: str, **kwargs) -> Generator['PublicResourceObject', None, None]: ...
    def get_public_type(self, public_key: str, **kwargs) -> str: ...
    def is_public_dir(self, public_key: str, **kwargs) -> bool: ...
    def is_public_file(self, public_key: str, **kwargs) -> bool: ...
    def trash_listdir(self, path: str, **kwargs) -> Generator['TrashResourceObject', None, None]: ...
    def get_trash_type(self, path: str, **kwargs) -> str: ...
    def is_trash_dir(self, path: str, **kwargs) -> bool: ...
    def is_trash_file(self, path: str, **kwargs) -> bool: ...
    def get_public_resources(self, **kwargs) -> PublicResourcesListObject: ...
    def patch(self, path: str, properties: dict, **kwargs) -> ResourceObject: ...
    def get_files(self, **kwargs) -> Generator['ResourceObject', None, None]: ...
    def get_last_uploaded(self, **kwargs) -> Generator['ResourceObject', None, None]: ...
    def upload_url(self, url: str, path: str, **kwargs) -> OperationLinkObject: ...
    def get_public_download_link(self, public_key: str, **kwargs) -> str: ...
    def download_public(self, public_key: str, file_or_path: Union[str, bytes, BinaryIO], **kwargs) -> PublicResourceLinkObject: ...
    def get_operation_status(self, operation_id: str, **kwargs) -> str: ...
