from ._internal_utils import to_native_string as to_native_string, unicode_is_ascii as unicode_is_ascii
from .auth import HTTPBasicAuth as HTTPBasicAuth
from .compat import Callable as Callable, JSONDecodeError as JSONDecodeError, Mapping as Mapping, basestring as basestring, builtin_str as builtin_str, chardet as chardet, cookielib as cookielib, urlencode as urlencode, urlsplit as urlsplit, urlunparse as urlunparse
from .cookies import cookiejar_from_dict as cookiejar_from_dict, get_cookie_header as get_cookie_header
from .exceptions import ChunkedEncodingError as ChunkedEncodingError, ConnectionError as ConnectionError, ContentDecodingError as ContentDecodingError, HTTPError as HTTPError, InvalidJSONError as InvalidJSONError, InvalidURL as InvalidURL, MissingSchema as MissingSchema, StreamConsumedError as StreamConsumedError
from .hooks import default_hooks as default_hooks
from .status_codes import codes as codes
from .structures import CaseInsensitiveDict as CaseInsensitiveDict
from .utils import check_header_validity as check_header_validity, get_auth_from_url as get_auth_from_url, guess_filename as guess_filename, guess_json_utf as guess_json_utf, iter_slices as iter_slices, parse_header_links as parse_header_links, requote_uri as requote_uri, stream_decode_response_unicode as stream_decode_response_unicode, super_len as super_len, to_key_val_list as to_key_val_list
from _typeshed import Incomplete
from collections.abc import Generator

REDIRECT_STATI: Incomplete
DEFAULT_REDIRECT_LIMIT: int
CONTENT_CHUNK_SIZE: Incomplete
ITER_CHUNK_SIZE: int

class RequestEncodingMixin:
    @property
    def path_url(self): ...

class RequestHooksMixin:
    def register_hook(self, event, hook) -> None: ...
    def deregister_hook(self, event, hook): ...

class Request(RequestHooksMixin):
    hooks: Incomplete
    method: Incomplete
    url: Incomplete
    headers: Incomplete
    files: Incomplete
    data: Incomplete
    json: Incomplete
    params: Incomplete
    auth: Incomplete
    cookies: Incomplete
    def __init__(self, method: Incomplete | None = ..., url: Incomplete | None = ..., headers: Incomplete | None = ..., files: Incomplete | None = ..., data: Incomplete | None = ..., params: Incomplete | None = ..., auth: Incomplete | None = ..., cookies: Incomplete | None = ..., hooks: Incomplete | None = ..., json: Incomplete | None = ...) -> None: ...
    def prepare(self): ...

class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
    method: Incomplete
    url: Incomplete
    headers: Incomplete
    body: Incomplete
    hooks: Incomplete
    def __init__(self) -> None: ...
    def prepare(self, method: Incomplete | None = ..., url: Incomplete | None = ..., headers: Incomplete | None = ..., files: Incomplete | None = ..., data: Incomplete | None = ..., params: Incomplete | None = ..., auth: Incomplete | None = ..., cookies: Incomplete | None = ..., hooks: Incomplete | None = ..., json: Incomplete | None = ...) -> None: ...
    def copy(self): ...
    def prepare_method(self, method) -> None: ...
    def prepare_url(self, url, params) -> None: ...
    def prepare_headers(self, headers) -> None: ...
    def prepare_body(self, data, files, json: Incomplete | None = ...) -> None: ...
    def prepare_content_length(self, body) -> None: ...
    def prepare_auth(self, auth, url: str = ...) -> None: ...
    def prepare_cookies(self, cookies) -> None: ...
    def prepare_hooks(self, hooks) -> None: ...

class Response:
    __attrs__: Incomplete
    status_code: Incomplete
    headers: Incomplete
    raw: Incomplete
    url: Incomplete
    encoding: Incomplete
    history: Incomplete
    reason: Incomplete
    cookies: Incomplete
    elapsed: Incomplete
    request: Incomplete
    def __init__(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args) -> None: ...
    def __bool__(self) -> bool: ...
    def __nonzero__(self): ...
    def __iter__(self): ...
    @property
    def ok(self): ...
    @property
    def is_redirect(self): ...
    @property
    def is_permanent_redirect(self): ...
    @property
    def next(self): ...
    @property
    def apparent_encoding(self): ...
    def iter_content(self, chunk_size: int = ..., decode_unicode: bool = ...): ...
    def iter_lines(self, chunk_size=..., decode_unicode: bool = ..., delimiter: Incomplete | None = ...) -> Generator[Incomplete, Incomplete, None]: ...
    @property
    def content(self): ...
    @property
    def text(self): ...
    def json(self, **kwargs): ...
    @property
    def links(self): ...
    def raise_for_status(self) -> None: ...
    def close(self) -> None: ...
