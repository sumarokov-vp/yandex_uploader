from . import certs as certs
from ._internal_utils import HEADER_VALIDATORS as HEADER_VALIDATORS, to_native_string as to_native_string
from .compat import Mapping as Mapping, basestring as basestring, bytes as bytes, getproxies as getproxies, getproxies_environment as getproxies_environment, integer_types as integer_types, proxy_bypass as proxy_bypass, proxy_bypass_environment as proxy_bypass_environment, quote as quote, str as str, unquote as unquote, urlparse as urlparse, urlunparse as urlunparse
from .cookies import cookiejar_from_dict as cookiejar_from_dict
from .exceptions import FileModeWarning as FileModeWarning, InvalidHeader as InvalidHeader, InvalidURL as InvalidURL, UnrewindableBodyError as UnrewindableBodyError
from .structures import CaseInsensitiveDict as CaseInsensitiveDict
from _typeshed import Incomplete
from collections.abc import Generator

NETRC_FILES: Incomplete
DEFAULT_CA_BUNDLE_PATH: Incomplete
DEFAULT_PORTS: Incomplete
DEFAULT_ACCEPT_ENCODING: Incomplete

def dict_to_sequence(d): ...
def super_len(o): ...
def get_netrc_auth(url, raise_errors: bool = ...): ...
def guess_filename(obj): ...
def extract_zipped_paths(path): ...
def atomic_open(filename) -> Generator[Incomplete, None, None]: ...
def from_key_val_list(value): ...
def to_key_val_list(value): ...
def parse_list_header(value): ...
def parse_dict_header(value): ...
def unquote_header_value(value, is_filename: bool = ...): ...
def dict_from_cookiejar(cj): ...
def add_dict_to_cookiejar(cj, cookie_dict): ...
def get_encodings_from_content(content): ...
def get_encoding_from_headers(headers): ...
def stream_decode_response_unicode(iterator, r) -> Generator[Incomplete, Incomplete, None]: ...
def iter_slices(string, slice_length) -> Generator[Incomplete, None, None]: ...
def get_unicode_from_response(r): ...

UNRESERVED_SET: Incomplete

def unquote_unreserved(uri): ...
def requote_uri(uri): ...
def address_in_network(ip, net): ...
def dotted_netmask(mask): ...
def is_ipv4_address(string_ip): ...
def is_valid_cidr(string_network): ...
def set_environ(env_name, value) -> Generator[None, None, None]: ...
def should_bypass_proxies(url, no_proxy): ...
def get_environ_proxies(url, no_proxy: Incomplete | None = ...): ...
def select_proxy(url, proxies): ...
def resolve_proxies(request, proxies, trust_env: bool = ...): ...
def default_user_agent(name: str = ...): ...
def default_headers(): ...
def parse_header_links(value): ...
def guess_json_utf(data): ...
def prepend_scheme_if_needed(url, new_scheme): ...
def get_auth_from_url(url): ...
def check_header_validity(header) -> None: ...
def urldefragauth(url): ...
def rewind_body(prepared_request) -> None: ...
