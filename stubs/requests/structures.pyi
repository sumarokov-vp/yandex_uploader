from .compat import Mapping as Mapping, MutableMapping as MutableMapping
from _typeshed import Incomplete

class CaseInsensitiveDict(MutableMapping):
    def __init__(self, data: Incomplete | None = ..., **kwargs) -> None: ...
    def __setitem__(self, key, value) -> None: ...
    def __getitem__(self, key): ...
    def __delitem__(self, key) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def lower_items(self): ...
    def __eq__(self, other): ...
    def copy(self): ...

class LookupDict(dict):
    name: Incomplete
    def __init__(self, name: Incomplete | None = ...) -> None: ...
    def __getitem__(self, key): ...
    def get(self, key, default: Incomplete | None = ...): ...
